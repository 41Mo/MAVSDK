// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/ftp/ftp.proto)

#include "ftp/ftp.grpc.pb.h"
#include "plugins/ftp/ftp.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <vector>

namespace mavsdk {
namespace backend {

template<typename Ftp = Ftp> class FtpServiceImpl final : public rpc::ftp::FtpService::Service {
public:
    FtpServiceImpl(Ftp& ftp) : _ftp(ftp) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::Ftp::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_ftp_result = new rpc::ftp::FtpResult();
        rpc_ftp_result->set_result(rpc_result);
        rpc_ftp_result->set_result_str(mavsdk::Ftp::result_str(result));

        response->set_allocated_ftp_result(rpc_ftp_result);
    }

    static std::unique_ptr<rpc::ftp::ProgressData>
    translateToRpcProgressData(const mavsdk::Ftp::ProgressData& progress_data)
    {
        std::unique_ptr<rpc::ftp::ProgressData> rpc_obj(new rpc::ftp::ProgressData());

        rpc_obj->set_bytes_transferred(progress_data.bytes_transferred);

        rpc_obj->set_total_bytes(progress_data.total_bytes);

        return rpc_obj;
    }

    static mavsdk::Ftp::ProgressData
    translateFromRpcProgressData(const rpc::ftp::ProgressData& progress_data)
    {
        mavsdk::Ftp::ProgressData obj;

        obj.bytes_transferred = progress_data.bytes_transferred();

        obj.total_bytes = progress_data.total_bytes();

        return obj;
    }

    static rpc::ftp::FtpResult::Result translateToRpcResult(const mavsdk::Ftp::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::Ftp::Result::Unknown:
                return rpc::ftp::FtpResult_Result_RESULT_UNKNOWN;
            case mavsdk::Ftp::Result::Success:
                return rpc::ftp::FtpResult_Result_RESULT_SUCCESS;
            case mavsdk::Ftp::Result::Next:
                return rpc::ftp::FtpResult_Result_RESULT_NEXT;
            case mavsdk::Ftp::Result::Timeout:
                return rpc::ftp::FtpResult_Result_RESULT_TIMEOUT;
            case mavsdk::Ftp::Result::Busy:
                return rpc::ftp::FtpResult_Result_RESULT_BUSY;
            case mavsdk::Ftp::Result::FileIoError:
                return rpc::ftp::FtpResult_Result_RESULT_FILE_IO_ERROR;
            case mavsdk::Ftp::Result::FileExists:
                return rpc::ftp::FtpResult_Result_RESULT_FILE_EXISTS;
            case mavsdk::Ftp::Result::FileDoesNotExist:
                return rpc::ftp::FtpResult_Result_RESULT_FILE_DOES_NOT_EXIST;
            case mavsdk::Ftp::Result::FileProtected:
                return rpc::ftp::FtpResult_Result_RESULT_FILE_PROTECTED;
            case mavsdk::Ftp::Result::InvalidParameter:
                return rpc::ftp::FtpResult_Result_RESULT_INVALID_PARAMETER;
            case mavsdk::Ftp::Result::Unsupported:
                return rpc::ftp::FtpResult_Result_RESULT_UNSUPPORTED;
            case mavsdk::Ftp::Result::ProtocolError:
                return rpc::ftp::FtpResult_Result_RESULT_PROTOCOL_ERROR;
        }
    }

    static mavsdk::Ftp::Result translateFromRpcResult(const rpc::ftp::FtpResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::ftp::FtpResult_Result_RESULT_UNKNOWN:
                return mavsdk::Ftp::Result::Unknown;
            case rpc::ftp::FtpResult_Result_RESULT_SUCCESS:
                return mavsdk::Ftp::Result::Success;
            case rpc::ftp::FtpResult_Result_RESULT_NEXT:
                return mavsdk::Ftp::Result::Next;
            case rpc::ftp::FtpResult_Result_RESULT_TIMEOUT:
                return mavsdk::Ftp::Result::Timeout;
            case rpc::ftp::FtpResult_Result_RESULT_BUSY:
                return mavsdk::Ftp::Result::Busy;
            case rpc::ftp::FtpResult_Result_RESULT_FILE_IO_ERROR:
                return mavsdk::Ftp::Result::FileIoError;
            case rpc::ftp::FtpResult_Result_RESULT_FILE_EXISTS:
                return mavsdk::Ftp::Result::FileExists;
            case rpc::ftp::FtpResult_Result_RESULT_FILE_DOES_NOT_EXIST:
                return mavsdk::Ftp::Result::FileDoesNotExist;
            case rpc::ftp::FtpResult_Result_RESULT_FILE_PROTECTED:
                return mavsdk::Ftp::Result::FileProtected;
            case rpc::ftp::FtpResult_Result_RESULT_INVALID_PARAMETER:
                return mavsdk::Ftp::Result::InvalidParameter;
            case rpc::ftp::FtpResult_Result_RESULT_UNSUPPORTED:
                return mavsdk::Ftp::Result::Unsupported;
            case rpc::ftp::FtpResult_Result_RESULT_PROTOCOL_ERROR:
                return mavsdk::Ftp::Result::ProtocolError;
        }
    }

    grpc::Status Reset(
        grpc::ServerContext* /* context */,
        const rpc::ftp::ResetRequest* /* request */,
        rpc::ftp::ResetResponse* response) override
    {
        auto result = _ftp.reset();

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeDownload(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::ftp::SubscribeDownloadRequest* /* request */,
        grpc::ServerWriter<rpc::ftp::DownloadResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _ftp.download_async(
            [this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](
                mavsdk::Ftp::Result result, const mavsdk::Ftp::ProgressData download) {
                rpc::ftp::DownloadResponse rpc_response;

                rpc_response.set_allocated_progress_data(
                    translateToRpcProgressData(download).release());

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_ftp_result = new rpc::ftp::FtpResult();
                rpc_ftp_result->set_result(rpc_result);
                rpc_ftp_result->set_result_str(mavsdk::Ftp::result_str(result));
                rpc_response.set_allocated_ftp_result(rpc_ftp_result);

                std::lock_guard<std::mutex> lock(subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _ftp.download_async(nullptr);
                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }

    grpc::Status SubscribeUpload(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::ftp::SubscribeUploadRequest* /* request */,
        grpc::ServerWriter<rpc::ftp::UploadResponse>* writer) override
    {
        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);

        std::mutex subscribe_mutex{};

        _ftp.upload_async([this, &writer, &stream_closed_promise, is_finished, &subscribe_mutex](
                              mavsdk::Ftp::Result result, const mavsdk::Ftp::ProgressData upload) {
            rpc::ftp::UploadResponse rpc_response;

            rpc_response.set_allocated_progress_data(translateToRpcProgressData(upload).release());

            auto rpc_result = translateToRpcResult(result);
            auto* rpc_ftp_result = new rpc::ftp::FtpResult();
            rpc_ftp_result->set_result(rpc_result);
            rpc_ftp_result->set_result_str(mavsdk::Ftp::result_str(result));
            rpc_response.set_allocated_ftp_result(rpc_ftp_result);

            std::lock_guard<std::mutex> lock(subscribe_mutex);
            if (!*is_finished && !writer->Write(rpc_response)) {
                _ftp.upload_async(nullptr);
                *is_finished = true;
                unregister_stream_stop_promise(stream_closed_promise);
                stream_closed_promise->set_value();
            }
        });

        stream_closed_future.wait();
        return grpc::Status::OK;
    }

    grpc::Status ListDirectory(
        grpc::ServerContext* /* context */,
        const rpc::ftp::ListDirectoryRequest* request,
        rpc::ftp::ListDirectoryResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "ListDirectory sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result_pair = _ftp.list_directory(request->remote_dir());

        if (response != nullptr) {
            fillResponseWithResult(response, result_pair.first);
            response->set_paths(result_pair.second);
        }

        return grpc::Status::OK;
    }

    grpc::Status CreateDirectory(
        grpc::ServerContext* /* context */,
        const rpc::ftp::CreateDirectoryRequest* request,
        rpc::ftp::CreateDirectoryResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "CreateDirectory sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.create_directory(request->remote_dir());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status RemoveDirectory(
        grpc::ServerContext* /* context */,
        const rpc::ftp::RemoveDirectoryRequest* request,
        rpc::ftp::RemoveDirectoryResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "RemoveDirectory sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.remove_directory(request->remote_dir());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status RemoveFile(
        grpc::ServerContext* /* context */,
        const rpc::ftp::RemoveFileRequest* request,
        rpc::ftp::RemoveFileResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "RemoveFile sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.remove_file(request->remote_file_path());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status Rename(
        grpc::ServerContext* /* context */,
        const rpc::ftp::RenameRequest* request,
        rpc::ftp::RenameResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "Rename sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.rename(request->remote_from_path(), request->remote_to_path());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status AreFilesIdentical(
        grpc::ServerContext* /* context */,
        const rpc::ftp::AreFilesIdenticalRequest* request,
        rpc::ftp::AreFilesIdenticalResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "AreFilesIdentical sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result_pair =
            _ftp.are_files_identical(request->local_file_path(), request->remote_file_path());

        if (response != nullptr) {
            fillResponseWithResult(response, result_pair.first);
            response->set_are_identical(result_pair.second);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetRootDirectory(
        grpc::ServerContext* /* context */,
        const rpc::ftp::SetRootDirectoryRequest* request,
        rpc::ftp::SetRootDirectoryResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "SetRootDirectory sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.set_root_directory(request->root_dir());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetTargetComponentId(
        grpc::ServerContext* /* context */,
        const rpc::ftp::SetTargetComponentIdRequest* request,
        rpc::ftp::SetTargetComponentIdResponse* response) override
    {
        if (request == nullptr) {
            LogWarn() << "SetTargetComponentId sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _ftp.set_target_component_id(request->component_id());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status GetOurComponentId(
        grpc::ServerContext* /* context */,
        const rpc::ftp::GetOurComponentIdRequest* /* request */,
        rpc::ftp::GetOurComponentIdResponse* response) override
    {
        auto result_pair = _ftp.get_our_component_id();

        if (response != nullptr) {
            fillResponseWithResult(response, result_pair.first);
            response->set_component_id(result_pair.second);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    Ftp& _ftp;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace backend
} // namespace mavsdk